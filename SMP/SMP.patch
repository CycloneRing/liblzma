diff --git a/po/it.po b/po/it.po
index dc1cfbf2..d1ca3de9 100644
--- a/po/it.po
+++ b/po/it.po
@@ -15,7 +15,7 @@ msgstr ""
 "Language: it\n"
 "MIME-Version: 1.0\n"
 "Content-Type: text/plain; charset=UTF-8\n"
-"Content-Transfer-Encoding: 8bit\n"
+"Content-Transfer-Encoding: 8-bit\n"
 "X-Launchpad-Export-Date: 2010-08-16 19:16+0000\n"
 "X-Generator: Poedit 1.6.10\n"
 "Plural-Forms: nplurals=2; plural=(n != 1);\n"
diff --git a/src/common/mythread.h b/src/common/mythread.h
index be226542..a305aef3 100644
--- a/src/common/mythread.h
+++ b/src/common/mythread.h
@@ -331,8 +331,10 @@ mythread_condtime_set(mythread_condtime *condtime, const mythread_cond *cond,
 
 #define WIN32_LEAN_AND_MEAN
 #ifdef MYTHREAD_VISTA
-#	undef _WIN32_WINNT
-#	define _WIN32_WINNT 0x0600
+#   if !defined(WINAPI_FAMILY) || !(WINAPI_FAMILY==WINAPI_FAMILY_PC_APP || WINAPI_FAMILY==WINAPI_FAMILY_PHONE_APP)
+#	    undef _WIN32_WINNT
+#	    define _WIN32_WINNT 0x0600
+#   endif
 #endif
 #include <windows.h>
 #include <process.h>
diff --git a/src/common/tuklib_cpucores.c b/src/common/tuklib_cpucores.c
index c16e188d..93f66b09 100644
--- a/src/common/tuklib_cpucores.c
+++ b/src/common/tuklib_cpucores.c
@@ -14,7 +14,9 @@
 
 #if defined(_WIN32) || defined(__CYGWIN__)
 #	ifndef _WIN32_WINNT
-#		define _WIN32_WINNT 0x0500
+#       if !defined(WINAPI_FAMILY) || !(WINAPI_FAMILY==WINAPI_FAMILY_PC_APP || WINAPI_FAMILY==WINAPI_FAMILY_PHONE_APP)
+#		    define _WIN32_WINNT 0x0500
+#       endif
 #	endif
 #	include <windows.h>
 
diff --git a/src/common/tuklib_integer.h b/src/common/tuklib_integer.h
index b1e84d5c..1e7b9027 100644
--- a/src/common/tuklib_integer.h
+++ b/src/common/tuklib_integer.h
@@ -97,6 +97,10 @@
 #	endif
 #endif
 
+#if defined(_MSC_VER) && _MSC_VER >= 1400
+#   include <intrin.h>
+#endif
+
 
 ////////////////////////////////
 // Compiler-specific features //
@@ -394,7 +398,7 @@ bsr32(uint32_t n)
 	// MSVC isn't supported by tuklib, but since this code exists,
 	// it doesn't hurt to have it here anyway.
 	uint32_t i;
-	_BitScanReverse((DWORD *)&i, n);
+	_BitScanReverse((unsigned long *)&i, n);
 	return i;
 
 #else
@@ -446,7 +450,7 @@ clz32(uint32_t n)
 
 #elif defined(_MSC_VER) && _MSC_VER >= 1400
 	uint32_t i;
-	_BitScanReverse((DWORD *)&i, n);
+	_BitScanReverse((unsigned long *)&i, n);
 	return i ^ 31U;
 
 #else
@@ -496,7 +500,7 @@ ctz32(uint32_t n)
 
 #elif defined(_MSC_VER) && _MSC_VER >= 1400
 	uint32_t i;
-	_BitScanForward((DWORD *)&i, n);
+	_BitScanForward((unsigned long *)&i, n);
 	return i;
 
 #else
diff --git a/src/common/tuklib_physmem.c b/src/common/tuklib_physmem.c
index 4053ad00..a07fd701 100644
--- a/src/common/tuklib_physmem.c
+++ b/src/common/tuklib_physmem.c
@@ -17,7 +17,9 @@
 // gives wrong results (from our point of view).
 #if defined(_WIN32) || defined(__CYGWIN__)
 #	ifndef _WIN32_WINNT
-#		define _WIN32_WINNT 0x0500
+#       if !defined(WINAPI_FAMILY) || !(WINAPI_FAMILY==WINAPI_FAMILY_PC_APP || WINAPI_FAMILY==WINAPI_FAMILY_PHONE_APP)
+#		    define _WIN32_WINNT 0x0500
+#       endif
 #	endif
 #	include <windows.h>
 
@@ -79,12 +81,19 @@ tuklib_physmem(void)
 	uint64_t ret = 0;
 
 #if defined(_WIN32) || defined(__CYGWIN__)
+#include <winapifamily.h>
+#if (_WIN32_WINNT >= 0x501) || (defined(WINAPI_FAMILY_PARTITION) && WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP) && !WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP))
+	MEMORYSTATUSEX meminfo;
+	meminfo.dwLength = sizeof(meminfo);
+	if (GlobalMemoryStatusEx(&meminfo))
+		ret = meminfo.ullTotalPhys;
+#else
 	if ((GetVersion() & 0xFF) >= 5) {
 		// Windows 2000 and later have GlobalMemoryStatusEx() which
 		// supports reporting values greater than 4 GiB. To keep the
 		// code working also on older Windows versions, use
 		// GlobalMemoryStatusEx() conditionally.
-		HMODULE kernel32 = GetModuleHandle("kernel32.dll");
+		HMODULE kernel32 = GetModuleHandleW(L"kernel32.dll");
 		if (kernel32 != NULL) {
 			typedef BOOL (WINAPI *gmse_type)(LPMEMORYSTATUSEX);
 			gmse_type gmse = (gmse_type)GetProcAddress(
@@ -107,6 +116,7 @@ tuklib_physmem(void)
 		GlobalMemoryStatus(&meminfo);
 		ret = meminfo.dwTotalPhys;
 	}
+#endif
 
 #elif defined(__OS2__)
 	unsigned long mem;
